/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Science;

import Main.Deshbord;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JLabel;

/**
 *
 * @author mmamm
 */
public class BloodCirculationOfHuman extends javax.swing.JFrame {

    /**
     * Creates new form BloodCirculationOfHuman
     */
    JLabel selectedLabal;

    public BloodCirculationOfHuman() {
        initComponents();
        disable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    int complete;
    int score;
    int health = 4;

    String idPas = "";

    public void setId(String id) {
        idPas = id;
        try {
            Connection con = database.db.getConnection();
            String sql = "SELECT userName FROM smart_learning.register WHERE id=?;";
            PreparedStatement st = con.prepareStatement(sql);
            st.setString(1, id);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                String uName = rs.getString("userName");
                lblUname.setText("welcome " + uName);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Deshbord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void insertToSql() {
        try {
            // create connection to database
            Connection con = database.db.getConnection();
            // Create prepared statement with the sql query
            PreparedStatement st1 = con.prepareStatement("UPDATE `smart_learning`.`science` SET `bloodSecularofHumanScore` = ?, `bloodSecularofHumanComplete` = ? WHERE (`stRegId` = '" + idPas + "');");
            // execute query
            st1.setString(1, score + "");
            st1.setString(2, complete + "");

            st1.executeUpdate();

            // show success message
        } catch (SQLException ex) {
            Logger.getLogger(ElectronicConfiguration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void reattampt() {
        disable();
        dfault();

        btnArteryThatCarriesBloodToHeadAndHands.setVisible(true);

        btnPulmonaryVeins.setVisible(true);

        btnHepaticArtery.setVisible(true);
        btnRenalArtery.setVisible(true);
        btnArterySuppliesBloodIntestines.setVisible(true);
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setVisible(true);
        btnArteryThatCarriesBloodFromLowerPartsHeart.setVisible(true);
        btnRenalVein.setVisible(true);
        btnHepaticVein.setVisible(true);
        btnHepaticPortalVein.setVisible(true);
        btnPulmonaryArtery.setVisible(true);
        btnInferiorVenaCava.setVisible(true);

        lblArteryThatCarriesBloodToHeadAndHands.setText("");
        lblHepaticPortalVein.setText("");
        lblArterySuppliesBloodIntestines.setText("");
        lblRenalVein.setText("");
        lblArteryThatCarriesBloodFromLowerPartsHeart.setText("");
        lblPulmonaryVeins.setText("");
        lblInferiorVenaCava.setText("");
        lblHepaticArtery.setText("");
        lblRenalArtery.setText("");
        lblHepaticVein.setText("");
        lblbtnPulmonaryArtery.setText("");
        lblArteryCarriesBloodLowerPartsBodyAndLegs.setText("");

        score = 0;
        lblTitle18.setText("Score - " + score);
        lblScore.setText(score + "");

        complete = 0;
        lblTitle17.setText("Completed - " + complete + "%");

        btnReattampt.setEnabled(false);

    }

    public void enable() {
        btnArteryThatCarriesBloodToHeadAndHands.setEnabled(true);

        btnPulmonaryVeins.setEnabled(true);

        btnHepaticArtery.setEnabled(true);
        btnRenalArtery.setEnabled(true);
        btnArterySuppliesBloodIntestines.setEnabled(true);
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setEnabled(true);
        btnArteryThatCarriesBloodFromLowerPartsHeart.setEnabled(true);
        btnRenalVein.setEnabled(true);
        btnHepaticVein.setEnabled(true);
        btnHepaticPortalVein.setEnabled(true);
        btnPulmonaryArtery.setEnabled(true);
        btnInferiorVenaCava.setEnabled(true);
    }

    public void disable() {
        btnArteryThatCarriesBloodToHeadAndHands.setEnabled(false);

        btnPulmonaryVeins.setEnabled(false);

        btnHepaticArtery.setEnabled(false);
        btnRenalArtery.setEnabled(false);
        btnArterySuppliesBloodIntestines.setEnabled(false);
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setEnabled(false);
        btnArteryThatCarriesBloodFromLowerPartsHeart.setEnabled(false);
        btnRenalVein.setEnabled(false);
        btnHepaticVein.setEnabled(false);
        btnHepaticPortalVein.setEnabled(false);
        btnPulmonaryArtery.setEnabled(false);
        btnInferiorVenaCava.setEnabled(false);
    }

    public void dfault() {
        lblArteryThatCarriesBloodToHeadAndHands.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblHepaticPortalVein.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblArterySuppliesBloodIntestines.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblRenalVein.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblArteryThatCarriesBloodFromLowerPartsHeart.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblPulmonaryVeins.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblInferiorVenaCava.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblHepaticArtery.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblRenalArtery.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblHepaticVein.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblbtnPulmonaryArtery.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        lblArteryCarriesBloodLowerPartsBodyAndLegs.setBorder(BorderFactory.createLineBorder(new Color(102, 102, 102)));
        disable();
    }

    public void selectLabal() {
        selectedLabal.setBorder(BorderFactory.createLineBorder(Color.blue));
        enable();
    }

    public void retunButon() {
        complete = complete - 7;

        if (selectedLabal.getText().equals("<html> Artery that carries blood <br> to head and hands </html>")) {
            btnArteryThatCarriesBloodToHeadAndHands.setVisible(true);
        } else if (selectedLabal.getText().equals("Pulmonary veins")) {
            btnPulmonaryVeins.setVisible(true);
        } else if (selectedLabal.getText().equals("Hepatic artery")) {
            btnHepaticArtery.setVisible(true);
        } else if (selectedLabal.getText().equals("Renal artery")) {
            btnRenalArtery.setVisible(true);
        } else if (selectedLabal.getText().equals("<html>Artery that supplies blood <br>to the intestines</html>")) {
            btnArterySuppliesBloodIntestines.setVisible(true);
        } else if (selectedLabal.getText().equals("<html> Artery that carries blood to<br>body and legs </html>")) {
            btnArteryCarriesBloodLowerPartsBodyAndLegs.setVisible(true);
        } else if (selectedLabal.getText().equals("<html>Artery that carries blood<br>from lower parts to the heart</html>")) {
            btnArteryThatCarriesBloodFromLowerPartsHeart.setVisible(true);
        } else if (selectedLabal.getText().equals("Renal vein")) {
            btnRenalVein.setVisible(true);
        } else if (selectedLabal.getText().equals("Hepatic vein")) {
            btnHepaticVein.setVisible(true);
        } else if (selectedLabal.getText().equals("Hepatic portal vein")) {
            btnHepaticPortalVein.setVisible(true);
        } else if (selectedLabal.getText().equals("Pulmonary artery")) {
            btnPulmonaryArtery.setVisible(true);
        } else if (selectedLabal.getText().equals("Inferior vena-cava")) {
            btnInferiorVenaCava.setVisible(true);
        }

        selectedLabal.setText("");
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnl_Header = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        health1 = new javax.swing.JButton();
        health2 = new javax.swing.JButton();
        health3 = new javax.swing.JButton();
        health4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblMainObject = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblPulmonaryVeins = new javax.swing.JLabel();
        lblHepaticArtery = new javax.swing.JLabel();
        lblRenalArtery = new javax.swing.JLabel();
        lblArterySuppliesBloodIntestines = new javax.swing.JLabel();
        lblArteryCarriesBloodLowerPartsBodyAndLegs = new javax.swing.JLabel();
        lblArteryThatCarriesBloodToHeadAndHands = new javax.swing.JLabel();
        lblArteryThatCarriesBloodFromLowerPartsHeart = new javax.swing.JLabel();
        lblRenalVein = new javax.swing.JLabel();
        lblHepaticPortalVein = new javax.swing.JLabel();
        lblHepaticVein = new javax.swing.JLabel();
        lblInferiorVenaCava = new javax.swing.JLabel();
        lblbtnPulmonaryArtery = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnAorta1 = new javax.swing.JLabel();
        pnlAnswer = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnArteryThatCarriesBloodToHeadAndHands = new javax.swing.JButton();
        btnPulmonaryVeins = new javax.swing.JButton();
        btnHepaticArtery = new javax.swing.JButton();
        btnRenalArtery = new javax.swing.JButton();
        btnArterySuppliesBloodIntestines = new javax.swing.JButton();
        btnArteryCarriesBloodLowerPartsBodyAndLegs = new javax.swing.JButton();
        btnArteryThatCarriesBloodFromLowerPartsHeart = new javax.swing.JButton();
        btnRenalVein = new javax.swing.JButton();
        btnHepaticVein = new javax.swing.JButton();
        btnHepaticPortalVein = new javax.swing.JButton();
        btnPulmonaryArtery = new javax.swing.JButton();
        btnInferiorVenaCava = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnReattampt = new javax.swing.JButton();
        btnChack = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        pnlDoubleBloodCirculation1 = new javax.swing.JPanel();
        lblDbc1 = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        dbcCoplete1 = new javax.swing.JLabel();
        dbcScore1 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        lblUserName6 = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        lblTitle17 = new javax.swing.JLabel();
        lblTitle18 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        lblUname = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        lblUserName9 = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        lblComplete = new javax.swing.JLabel();
        lblScoreSide = new javax.swing.JLabel();
        btnBloodCircleHuman = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnHeat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pnl_Header.setBackground(new java.awt.Color(255, 255, 255));
        pnl_Header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Health");
        pnl_Header.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 194, 20));

        health1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hart.png"))); // NOI18N
        health1.setBorder(null);
        health1.setContentAreaFilled(false);
        pnl_Header.add(health1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        health2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hart.png"))); // NOI18N
        health2.setBorder(null);
        health2.setContentAreaFilled(false);
        pnl_Header.add(health2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 50, -1));

        health3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hart.png"))); // NOI18N
        health3.setBorder(null);
        health3.setContentAreaFilled(false);
        pnl_Header.add(health3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, -1, -1));

        health4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hart.png"))); // NOI18N
        health4.setBorder(null);
        health4.setContentAreaFilled(false);
        pnl_Header.add(health4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Set the correct body parts name in correct place.");
        pnl_Header.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, -1, -1));

        lblMainObject.setFont(new java.awt.Font("Poppins SemiBold", 0, 24)); // NOI18N
        lblMainObject.setForeground(new java.awt.Color(51, 51, 51));
        lblMainObject.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMainObject.setText("Blood Circulation of Human");
        pnl_Header.add(lblMainObject, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 344, -1));

        jLabel8.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Score");
        pnl_Header.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 10, -1, -1));

        lblScore.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblScore.setForeground(new java.awt.Color(102, 102, 102));
        lblScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScore.setText("000");
        pnl_Header.add(lblScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 40, 39, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/scienceTitle.png"))); // NOI18N
        pnl_Header.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 90));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(51, 51, 51));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPulmonaryVeins.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblPulmonaryVeins.setForeground(new java.awt.Color(102, 102, 102));
        lblPulmonaryVeins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPulmonaryVeins.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblPulmonaryVeins.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblPulmonaryVeins.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPulmonaryVeinsMouseClicked(evt);
            }
        });
        jPanel3.add(lblPulmonaryVeins, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 210, 180, 40));

        lblHepaticArtery.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblHepaticArtery.setForeground(new java.awt.Color(102, 102, 102));
        lblHepaticArtery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHepaticArtery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblHepaticArtery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHepaticArtery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHepaticArteryMouseClicked(evt);
            }
        });
        jPanel3.add(lblHepaticArtery, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 260, 180, 40));

        lblRenalArtery.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblRenalArtery.setForeground(new java.awt.Color(102, 102, 102));
        lblRenalArtery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRenalArtery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblRenalArtery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblRenalArtery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRenalArteryMouseClicked(evt);
            }
        });
        jPanel3.add(lblRenalArtery, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 360, 180, 40));

        lblArterySuppliesBloodIntestines.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblArterySuppliesBloodIntestines.setForeground(new java.awt.Color(102, 102, 102));
        lblArterySuppliesBloodIntestines.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblArterySuppliesBloodIntestines.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblArterySuppliesBloodIntestines.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblArterySuppliesBloodIntestines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblArterySuppliesBloodIntestinesMouseClicked(evt);
            }
        });
        jPanel3.add(lblArterySuppliesBloodIntestines, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 310, 180, 40));

        lblArteryCarriesBloodLowerPartsBodyAndLegs.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblArteryCarriesBloodLowerPartsBodyAndLegs.setForeground(new java.awt.Color(102, 102, 102));
        lblArteryCarriesBloodLowerPartsBodyAndLegs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblArteryCarriesBloodLowerPartsBodyAndLegs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblArteryCarriesBloodLowerPartsBodyAndLegs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblArteryCarriesBloodLowerPartsBodyAndLegs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblArteryCarriesBloodLowerPartsBodyAndLegsMouseClicked(evt);
            }
        });
        jPanel3.add(lblArteryCarriesBloodLowerPartsBodyAndLegs, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 410, 180, 40));

        lblArteryThatCarriesBloodToHeadAndHands.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblArteryThatCarriesBloodToHeadAndHands.setForeground(new java.awt.Color(102, 102, 102));
        lblArteryThatCarriesBloodToHeadAndHands.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblArteryThatCarriesBloodToHeadAndHands.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblArteryThatCarriesBloodToHeadAndHands.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblArteryThatCarriesBloodToHeadAndHands.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblArteryThatCarriesBloodToHeadAndHandsMouseClicked(evt);
            }
        });
        jPanel3.add(lblArteryThatCarriesBloodToHeadAndHands, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 180, 40));

        lblArteryThatCarriesBloodFromLowerPartsHeart.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblArteryThatCarriesBloodFromLowerPartsHeart.setForeground(new java.awt.Color(102, 102, 102));
        lblArteryThatCarriesBloodFromLowerPartsHeart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblArteryThatCarriesBloodFromLowerPartsHeart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblArteryThatCarriesBloodFromLowerPartsHeart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblArteryThatCarriesBloodFromLowerPartsHeart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblArteryThatCarriesBloodFromLowerPartsHeartMouseClicked(evt);
            }
        });
        jPanel3.add(lblArteryThatCarriesBloodFromLowerPartsHeart, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 170, 40));

        lblRenalVein.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblRenalVein.setForeground(new java.awt.Color(102, 102, 102));
        lblRenalVein.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRenalVein.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblRenalVein.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblRenalVein.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRenalVeinMouseClicked(evt);
            }
        });
        jPanel3.add(lblRenalVein, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 170, 40));

        lblHepaticPortalVein.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblHepaticPortalVein.setForeground(new java.awt.Color(102, 102, 102));
        lblHepaticPortalVein.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHepaticPortalVein.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblHepaticPortalVein.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHepaticPortalVein.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHepaticPortalVeinMouseClicked(evt);
            }
        });
        jPanel3.add(lblHepaticPortalVein, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 170, 40));

        lblHepaticVein.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblHepaticVein.setForeground(new java.awt.Color(102, 102, 102));
        lblHepaticVein.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHepaticVein.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblHepaticVein.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHepaticVein.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHepaticVeinMouseClicked(evt);
            }
        });
        jPanel3.add(lblHepaticVein, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 170, 40));

        lblInferiorVenaCava.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblInferiorVenaCava.setForeground(new java.awt.Color(102, 102, 102));
        lblInferiorVenaCava.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInferiorVenaCava.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblInferiorVenaCava.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblInferiorVenaCava.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblInferiorVenaCavaMouseClicked(evt);
            }
        });
        jPanel3.add(lblInferiorVenaCava, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 170, 40));

        lblbtnPulmonaryArtery.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        lblbtnPulmonaryArtery.setForeground(new java.awt.Color(102, 102, 102));
        lblbtnPulmonaryArtery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblbtnPulmonaryArtery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        lblbtnPulmonaryArtery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblbtnPulmonaryArtery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblbtnPulmonaryArteryMouseClicked(evt);
            }
        });
        jPanel3.add(lblbtnPulmonaryArtery, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 170, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Blood-circulation-of-human.png"))); // NOI18N
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 520, 411));

        btnAorta1.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnAorta1.setForeground(new java.awt.Color(102, 102, 102));
        btnAorta1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnAorta1.setText("Click empty box and select answer");
        btnAorta1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAorta1.setEnabled(false);
        btnAorta1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAorta1MouseClicked(evt);
            }
        });
        jPanel3.add(btnAorta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, -1));

        pnlAnswer.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Answers");

        btnArteryThatCarriesBloodToHeadAndHands.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnArteryThatCarriesBloodToHeadAndHands.setForeground(new java.awt.Color(102, 102, 102));
        btnArteryThatCarriesBloodToHeadAndHands.setText("<html> Artery that carries blood <br> to head and hands </html>");
        btnArteryThatCarriesBloodToHeadAndHands.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnArteryThatCarriesBloodToHeadAndHands.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnArteryThatCarriesBloodToHeadAndHands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArteryThatCarriesBloodToHeadAndHandsActionPerformed(evt);
            }
        });

        btnPulmonaryVeins.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnPulmonaryVeins.setForeground(new java.awt.Color(102, 102, 102));
        btnPulmonaryVeins.setText("Pulmonary veins");
        btnPulmonaryVeins.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnPulmonaryVeins.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPulmonaryVeins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPulmonaryVeinsActionPerformed(evt);
            }
        });

        btnHepaticArtery.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnHepaticArtery.setForeground(new java.awt.Color(102, 102, 102));
        btnHepaticArtery.setText("Hepatic artery");
        btnHepaticArtery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnHepaticArtery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHepaticArtery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHepaticArteryActionPerformed(evt);
            }
        });

        btnRenalArtery.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnRenalArtery.setForeground(new java.awt.Color(102, 102, 102));
        btnRenalArtery.setText("Renal artery");
        btnRenalArtery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnRenalArtery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRenalArtery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenalArteryActionPerformed(evt);
            }
        });

        btnArterySuppliesBloodIntestines.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnArterySuppliesBloodIntestines.setForeground(new java.awt.Color(102, 102, 102));
        btnArterySuppliesBloodIntestines.setText("<html>Artery that supplies blood <br>to the intestines</html>");
        btnArterySuppliesBloodIntestines.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnArterySuppliesBloodIntestines.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnArterySuppliesBloodIntestines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArterySuppliesBloodIntestinesActionPerformed(evt);
            }
        });

        btnArteryCarriesBloodLowerPartsBodyAndLegs.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setForeground(new java.awt.Color(102, 102, 102));
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setText("<html> Artery that carries blood to<br>body and legs </html>");
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnArteryCarriesBloodLowerPartsBodyAndLegs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArteryCarriesBloodLowerPartsBodyAndLegsActionPerformed(evt);
            }
        });

        btnArteryThatCarriesBloodFromLowerPartsHeart.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnArteryThatCarriesBloodFromLowerPartsHeart.setForeground(new java.awt.Color(102, 102, 102));
        btnArteryThatCarriesBloodFromLowerPartsHeart.setText("<html>Artery that carries blood<br>from lower parts to the heart</html>");
        btnArteryThatCarriesBloodFromLowerPartsHeart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnArteryThatCarriesBloodFromLowerPartsHeart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnArteryThatCarriesBloodFromLowerPartsHeart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArteryThatCarriesBloodFromLowerPartsHeartActionPerformed(evt);
            }
        });

        btnRenalVein.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnRenalVein.setForeground(new java.awt.Color(102, 102, 102));
        btnRenalVein.setText("Renal vein");
        btnRenalVein.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnRenalVein.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRenalVein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenalVeinActionPerformed(evt);
            }
        });

        btnHepaticVein.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnHepaticVein.setForeground(new java.awt.Color(102, 102, 102));
        btnHepaticVein.setText("Hepatic vein");
        btnHepaticVein.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnHepaticVein.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHepaticVein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHepaticVeinActionPerformed(evt);
            }
        });

        btnHepaticPortalVein.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnHepaticPortalVein.setForeground(new java.awt.Color(102, 102, 102));
        btnHepaticPortalVein.setText("Hepatic portal vein");
        btnHepaticPortalVein.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnHepaticPortalVein.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHepaticPortalVein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHepaticPortalVeinActionPerformed(evt);
            }
        });

        btnPulmonaryArtery.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnPulmonaryArtery.setForeground(new java.awt.Color(102, 102, 102));
        btnPulmonaryArtery.setText("Pulmonary artery");
        btnPulmonaryArtery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnPulmonaryArtery.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPulmonaryArtery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPulmonaryArteryActionPerformed(evt);
            }
        });

        btnInferiorVenaCava.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        btnInferiorVenaCava.setForeground(new java.awt.Color(102, 102, 102));
        btnInferiorVenaCava.setText("Inferior vena-cava");
        btnInferiorVenaCava.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        btnInferiorVenaCava.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInferiorVenaCava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInferiorVenaCavaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAnswerLayout = new javax.swing.GroupLayout(pnlAnswer);
        pnlAnswer.setLayout(pnlAnswerLayout);
        pnlAnswerLayout.setHorizontalGroup(
            pnlAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnswerLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAnswerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPulmonaryVeins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAnswerLayout.createSequentialGroup()
                        .addComponent(btnHepaticArtery, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRenalArtery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnArterySuppliesBloodIntestines, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnArteryCarriesBloodLowerPartsBodyAndLegs, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnArteryThatCarriesBloodFromLowerPartsHeart, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRenalVein, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHepaticVein, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHepaticPortalVein, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInferiorVenaCava, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPulmonaryArtery, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnArteryThatCarriesBloodToHeadAndHands))
                .addContainerGap())
        );
        pnlAnswerLayout.setVerticalGroup(
            pnlAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAnswerLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(21, 21, 21)
                .addComponent(btnArteryThatCarriesBloodToHeadAndHands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPulmonaryVeins, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHepaticArtery, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRenalArtery, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnArterySuppliesBloodIntestines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnArteryCarriesBloodLowerPartsBodyAndLegs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnArteryThatCarriesBloodFromLowerPartsHeart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRenalVein, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHepaticVein, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHepaticPortalVein, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPulmonaryArtery, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnInferiorVenaCava, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        btnReattampt.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        btnReattampt.setForeground(new java.awt.Color(51, 51, 51));
        btnReattampt.setText("Reattempt ");
        btnReattampt.setEnabled(false);
        btnReattampt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReattamptActionPerformed(evt);
            }
        });

        btnChack.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        btnChack.setForeground(new java.awt.Color(51, 51, 51));
        btnChack.setText("Chack");
        btnChack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnChack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReattampt)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReattampt)
                    .addComponent(btnChack))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pnlAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBack)))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_Header, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        pnlDoubleBloodCirculation1.setBackground(new java.awt.Color(247, 247, 247));
        pnlDoubleBloodCirculation1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pnlDoubleBloodCirculation1.setEnabled(false);

        lblDbc1.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        lblDbc1.setForeground(new java.awt.Color(102, 102, 102));
        lblDbc1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDbc1.setText("Double blood circulation");

        dbcCoplete1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        dbcCoplete1.setForeground(new java.awt.Color(102, 102, 102));
        dbcCoplete1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dbcCoplete1.setText("Completed - 0%");

        dbcScore1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        dbcScore1.setForeground(new java.awt.Color(102, 102, 102));
        dbcScore1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dbcScore1.setText("Score - 0");

        javax.swing.GroupLayout pnlDoubleBloodCirculation1Layout = new javax.swing.GroupLayout(pnlDoubleBloodCirculation1);
        pnlDoubleBloodCirculation1.setLayout(pnlDoubleBloodCirculation1Layout);
        pnlDoubleBloodCirculation1Layout.setHorizontalGroup(
            pnlDoubleBloodCirculation1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoubleBloodCirculation1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDoubleBloodCirculation1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDbc1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbcScore1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbcCoplete1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator13))
                .addContainerGap())
        );
        pnlDoubleBloodCirculation1Layout.setVerticalGroup(
            pnlDoubleBloodCirculation1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoubleBloodCirculation1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblDbc1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbcCoplete1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbcScore1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(247, 247, 247));
        jPanel12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel12MouseClicked(evt);
            }
        });

        lblUserName6.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        lblUserName6.setForeground(new java.awt.Color(51, 51, 51));
        lblUserName6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUserName6.setText("Blood circulation of human");

        lblTitle17.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        lblTitle17.setForeground(new java.awt.Color(51, 51, 51));
        lblTitle17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle17.setText("Completed - 0%");

        lblTitle18.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        lblTitle18.setForeground(new java.awt.Color(51, 51, 51));
        lblTitle18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle18.setText("Score - 0");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserName6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTitle18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTitle17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator11))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblUserName6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTitle17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle18)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jButton6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(102, 102, 102));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/profile.png"))); // NOI18N
        jButton6.setContentAreaFilled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        lblUname.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        lblUname.setForeground(new java.awt.Color(102, 102, 102));
        lblUname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUname.setText("Wlcome Admin");

        jPanel14.setBackground(new java.awt.Color(247, 247, 247));
        jPanel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel14MouseClicked(evt);
            }
        });

        lblUserName9.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        lblUserName9.setForeground(new java.awt.Color(102, 102, 102));
        lblUserName9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUserName9.setText("Heart");

        lblComplete.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        lblComplete.setForeground(new java.awt.Color(102, 102, 102));
        lblComplete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblComplete.setText("Completed - 0%");

        lblScoreSide.setFont(new java.awt.Font("Segoe UI Semibold", 1, 13)); // NOI18N
        lblScoreSide.setForeground(new java.awt.Color(102, 102, 102));
        lblScoreSide.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScoreSide.setText("Score - 0");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserName9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblScoreSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblComplete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator14))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblUserName9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblComplete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblScoreSide)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        btnBloodCircleHuman.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        btnBloodCircleHuman.setText("Blood Circulation of Human");
        btnBloodCircleHuman.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255), 2));
        btnBloodCircleHuman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBloodCircleHumanActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        jButton2.setText("Double blood circulation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnHeat.setFont(new java.awt.Font("Poppins Medium", 0, 13)); // NOI18N
        btnHeat.setText("Heart");
        btnHeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHeatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDoubleBloodCirculation1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBloodCircleHuman, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHeat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUname)
                .addGap(18, 18, 18)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHeat, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDoubleBloodCirculation1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBloodCircleHuman, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(7, 7, 7))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Main.ScienceHub sh = new Main.ScienceHub();
        sh.setId(idPas);
        sh.show();
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void lblPulmonaryVeinsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPulmonaryVeinsMouseClicked
        selectedLabal = lblPulmonaryVeins;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblPulmonaryVeinsMouseClicked

    private void lblHepaticArteryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHepaticArteryMouseClicked
        selectedLabal = lblHepaticArtery;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblHepaticArteryMouseClicked

    private void lblRenalArteryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRenalArteryMouseClicked
        selectedLabal = lblRenalArtery;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblRenalArteryMouseClicked

    private void lblArterySuppliesBloodIntestinesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblArterySuppliesBloodIntestinesMouseClicked
        selectedLabal = lblArterySuppliesBloodIntestines;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblArterySuppliesBloodIntestinesMouseClicked

    private void lblArteryCarriesBloodLowerPartsBodyAndLegsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblArteryCarriesBloodLowerPartsBodyAndLegsMouseClicked
        selectedLabal = lblArteryCarriesBloodLowerPartsBodyAndLegs;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblArteryCarriesBloodLowerPartsBodyAndLegsMouseClicked

    private void lblArteryThatCarriesBloodToHeadAndHandsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblArteryThatCarriesBloodToHeadAndHandsMouseClicked

        selectedLabal = lblArteryThatCarriesBloodToHeadAndHands;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblArteryThatCarriesBloodToHeadAndHandsMouseClicked

    private void lblArteryThatCarriesBloodFromLowerPartsHeartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblArteryThatCarriesBloodFromLowerPartsHeartMouseClicked
        selectedLabal = lblArteryThatCarriesBloodFromLowerPartsHeart;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblArteryThatCarriesBloodFromLowerPartsHeartMouseClicked

    private void lblRenalVeinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRenalVeinMouseClicked
        selectedLabal = lblRenalVein;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblRenalVeinMouseClicked

    private void lblHepaticPortalVeinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHepaticPortalVeinMouseClicked
        selectedLabal = lblHepaticPortalVein;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblHepaticPortalVeinMouseClicked

    private void lblHepaticVeinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHepaticVeinMouseClicked
        selectedLabal = lblHepaticVein;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblHepaticVeinMouseClicked

    private void lblInferiorVenaCavaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInferiorVenaCavaMouseClicked
        selectedLabal = lblInferiorVenaCava;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblInferiorVenaCavaMouseClicked

    private void lblbtnPulmonaryArteryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblbtnPulmonaryArteryMouseClicked
        selectedLabal = lblbtnPulmonaryArtery;
        if (selectedLabal.getText().equals("")) {
            dfault();
            selectLabal();
        } else {

            dfault();
            retunButon();

        }
    }//GEN-LAST:event_lblbtnPulmonaryArteryMouseClicked

    private void btnAorta1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAorta1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAorta1MouseClicked

    private void btnArteryThatCarriesBloodToHeadAndHandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArteryThatCarriesBloodToHeadAndHandsActionPerformed
        complete = complete + 7;
        String txt = btnArteryThatCarriesBloodToHeadAndHands.getText();
        selectedLabal.setText(txt);
        btnArteryThatCarriesBloodToHeadAndHands.setVisible(false);
        disable();
    }//GEN-LAST:event_btnArteryThatCarriesBloodToHeadAndHandsActionPerformed

    private void btnPulmonaryVeinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPulmonaryVeinsActionPerformed
        complete = complete + 7;
        String txt = btnPulmonaryVeins.getText();
        selectedLabal.setText(txt);
        btnPulmonaryVeins.setVisible(false);
        disable();
    }//GEN-LAST:event_btnPulmonaryVeinsActionPerformed

    private void btnHepaticArteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHepaticArteryActionPerformed
        complete = complete + 7;
        String txt = btnHepaticArtery.getText();
        selectedLabal.setText(txt);
        btnHepaticArtery.setVisible(false);
        disable();
    }//GEN-LAST:event_btnHepaticArteryActionPerformed

    private void btnRenalArteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenalArteryActionPerformed
        complete = complete + 7;
        String txt = btnRenalArtery.getText();
        selectedLabal.setText(txt);
        btnRenalArtery.setVisible(false);
        disable();
    }//GEN-LAST:event_btnRenalArteryActionPerformed

    private void btnArterySuppliesBloodIntestinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArterySuppliesBloodIntestinesActionPerformed
        complete = complete + 7;
        String txt = btnArterySuppliesBloodIntestines.getText();
        selectedLabal.setText(txt);
        btnArterySuppliesBloodIntestines.setVisible(false);
        disable();
    }//GEN-LAST:event_btnArterySuppliesBloodIntestinesActionPerformed

    private void btnArteryCarriesBloodLowerPartsBodyAndLegsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArteryCarriesBloodLowerPartsBodyAndLegsActionPerformed
        complete = complete + 7;
        String txt = btnArteryCarriesBloodLowerPartsBodyAndLegs.getText();
        selectedLabal.setText(txt);
        btnArteryCarriesBloodLowerPartsBodyAndLegs.setVisible(false);
        disable();
    }//GEN-LAST:event_btnArteryCarriesBloodLowerPartsBodyAndLegsActionPerformed

    private void btnArteryThatCarriesBloodFromLowerPartsHeartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArteryThatCarriesBloodFromLowerPartsHeartActionPerformed
        complete = complete + 7;
        String txt = btnArteryThatCarriesBloodFromLowerPartsHeart.getText();
        selectedLabal.setText(txt);
        btnArteryThatCarriesBloodFromLowerPartsHeart.setVisible(false);
        disable();
    }//GEN-LAST:event_btnArteryThatCarriesBloodFromLowerPartsHeartActionPerformed

    private void btnRenalVeinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenalVeinActionPerformed
        complete = complete + 7;
        String txt = btnRenalVein.getText();
        selectedLabal.setText(txt);
        btnRenalVein.setVisible(false);
        disable();
    }//GEN-LAST:event_btnRenalVeinActionPerformed

    private void btnHepaticVeinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHepaticVeinActionPerformed
        complete = complete + 7;
        String txt = btnHepaticVein.getText();
        selectedLabal.setText(txt);
        btnHepaticVein.setVisible(false);
        disable();
    }//GEN-LAST:event_btnHepaticVeinActionPerformed

    private void btnHepaticPortalVeinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHepaticPortalVeinActionPerformed
        complete = complete + 7;
        String txt = btnHepaticPortalVein.getText();
        selectedLabal.setText(txt);
        btnHepaticPortalVein.setVisible(false);
        disable();
    }//GEN-LAST:event_btnHepaticPortalVeinActionPerformed

    private void btnPulmonaryArteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPulmonaryArteryActionPerformed
        complete = complete + 7;
        String txt = btnPulmonaryArtery.getText();
        selectedLabal.setText(txt);
        btnPulmonaryArtery.setVisible(false);
        disable();
    }//GEN-LAST:event_btnPulmonaryArteryActionPerformed

    private void btnInferiorVenaCavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInferiorVenaCavaActionPerformed
        complete = complete + 7;
        String txt = btnInferiorVenaCava.getText();
        selectedLabal.setText(txt);
        btnInferiorVenaCava.setVisible(false);
        disable();
    }//GEN-LAST:event_btnInferiorVenaCavaActionPerformed

    private void btnReattamptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReattamptActionPerformed
        btnChack.setEnabled(true);
        if (health == 0) {
            health = 4;
            health1.setVisible(true);
            health2.setVisible(true);
            health3.setVisible(true);
            health4.setVisible(true);
        }
        reattampt();
    }//GEN-LAST:event_btnReattamptActionPerformed

    private void btnChackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChackActionPerformed

        score = 0;
        ///////////
        if (lblArteryThatCarriesBloodToHeadAndHands.getText().equals("<html> Artery that carries blood <br> to head and hands </html>")) {
            lblArteryThatCarriesBloodToHeadAndHands.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblArteryThatCarriesBloodToHeadAndHands.setBorder(BorderFactory.createLineBorder(Color.red));

        }
        ///////////
        if (lblPulmonaryVeins.getText().equals("Pulmonary veins")) {
            lblPulmonaryVeins.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblPulmonaryVeins.setBorder(BorderFactory.createLineBorder(Color.red));

        }
        ///////////
        if (lblHepaticArtery.getText().equals("Hepatic artery")) {
            lblHepaticArtery.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblHepaticArtery.setBorder(BorderFactory.createLineBorder(Color.red));

        }
        ///////////
        if (lblArterySuppliesBloodIntestines.getText().equals("<html>Artery that supplies blood <br>to the intestines</html>")) {
            lblArterySuppliesBloodIntestines.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblArterySuppliesBloodIntestines.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblRenalArtery.getText().equals("Renal artery")) {
            lblRenalArtery.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblRenalArtery.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblArteryCarriesBloodLowerPartsBodyAndLegs.getText().equals("<html> Artery that carries blood to<br>body and legs </html>")) {
            lblArteryCarriesBloodLowerPartsBodyAndLegs.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblArteryCarriesBloodLowerPartsBodyAndLegs.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////

        if (lblArteryThatCarriesBloodFromLowerPartsHeart.getText().equals("<html>Artery that carries blood<br>from lower parts to the heart</html>")) {
            lblArteryThatCarriesBloodFromLowerPartsHeart.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblArteryThatCarriesBloodFromLowerPartsHeart.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblRenalVein.getText().equals("Renal vein")) {
            lblRenalVein.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblRenalVein.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblHepaticPortalVein.getText().equals("Hepatic portal vein")) {
            lblHepaticPortalVein.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblHepaticPortalVein.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblHepaticVein.getText().equals("Hepatic vein")) {
            lblHepaticVein.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblHepaticVein.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblInferiorVenaCava.getText().equals("Inferior vena-cava")) {
            lblInferiorVenaCava.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblInferiorVenaCava.setBorder(BorderFactory.createLineBorder(Color.red));

        }///////////
        if (lblbtnPulmonaryArtery.getText().equals("Pulmonary artery")) {
            lblbtnPulmonaryArtery.setBorder(BorderFactory.createLineBorder(Color.green));
            score = score + 7;

        } else {
            lblbtnPulmonaryArtery.setBorder(BorderFactory.createLineBorder(Color.red));

        }

        if (complete == 84) {
            complete = complete + 16;

        }

        lblTitle17.setText("Completed - " + complete + "%");

        if (score == 84) {
            score = score + 16;
            btnReattampt.setEnabled(false);
            btnChack.setEnabled(false);
        } else {
            health--;
            if (health == 3) {
                health4.setVisible(false);
            } else if (health == 2) {
                health3.setVisible(false);
            } else if (health == 1) {
                health2.setVisible(false);
            } else if (health == 0) {
                health1.setVisible(false);
                btnChack.setEnabled(false);
                btnReattampt.setEnabled(true);

            }
        }
        lblScore.setText(score + "");
        lblTitle18.setText("Score - " + score);
        insertToSql();
    }//GEN-LAST:event_btnChackActionPerformed

    private void jPanel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseClicked

    }//GEN-LAST:event_jPanel12MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jPanel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseClicked

    }//GEN-LAST:event_jPanel14MouseClicked

    private void btnBloodCircleHumanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBloodCircleHumanActionPerformed
       
    }//GEN-LAST:event_btnBloodCircleHumanActionPerformed

    private void btnHeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHeatActionPerformed
        Science.HumanHeart hh = new HumanHeart();
        hh.setId(idPas);
        hh.show();
        this.dispose();
    }//GEN-LAST:event_btnHeatActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Science.DoubleBloodCirculer bch = new Science.DoubleBloodCirculer();
        bch.setId(idPas);
        bch.show();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BloodCirculationOfHuman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BloodCirculationOfHuman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BloodCirculationOfHuman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BloodCirculationOfHuman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BloodCirculationOfHuman().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnAorta1;
    private javax.swing.JButton btnArteryCarriesBloodLowerPartsBodyAndLegs;
    private javax.swing.JButton btnArterySuppliesBloodIntestines;
    private javax.swing.JButton btnArteryThatCarriesBloodFromLowerPartsHeart;
    private javax.swing.JButton btnArteryThatCarriesBloodToHeadAndHands;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBloodCircleHuman;
    private javax.swing.JButton btnChack;
    private javax.swing.JButton btnHeat;
    private javax.swing.JButton btnHepaticArtery;
    private javax.swing.JButton btnHepaticPortalVein;
    private javax.swing.JButton btnHepaticVein;
    private javax.swing.JButton btnInferiorVenaCava;
    private javax.swing.JButton btnPulmonaryArtery;
    private javax.swing.JButton btnPulmonaryVeins;
    private javax.swing.JButton btnReattampt;
    private javax.swing.JButton btnRenalArtery;
    private javax.swing.JButton btnRenalVein;
    private javax.swing.JLabel dbcCoplete1;
    private javax.swing.JLabel dbcScore1;
    private javax.swing.JButton health1;
    private javax.swing.JButton health2;
    private javax.swing.JButton health3;
    private javax.swing.JButton health4;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JLabel lblArteryCarriesBloodLowerPartsBodyAndLegs;
    private javax.swing.JLabel lblArterySuppliesBloodIntestines;
    private javax.swing.JLabel lblArteryThatCarriesBloodFromLowerPartsHeart;
    private javax.swing.JLabel lblArteryThatCarriesBloodToHeadAndHands;
    private javax.swing.JLabel lblComplete;
    private javax.swing.JLabel lblDbc1;
    private javax.swing.JLabel lblHepaticArtery;
    private javax.swing.JLabel lblHepaticPortalVein;
    private javax.swing.JLabel lblHepaticVein;
    private javax.swing.JLabel lblInferiorVenaCava;
    private javax.swing.JLabel lblMainObject;
    private javax.swing.JLabel lblPulmonaryVeins;
    private javax.swing.JLabel lblRenalArtery;
    private javax.swing.JLabel lblRenalVein;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblScoreSide;
    private javax.swing.JLabel lblTitle17;
    private javax.swing.JLabel lblTitle18;
    private javax.swing.JLabel lblUname;
    private javax.swing.JLabel lblUserName6;
    private javax.swing.JLabel lblUserName9;
    private javax.swing.JLabel lblbtnPulmonaryArtery;
    private javax.swing.JPanel pnlAnswer;
    private javax.swing.JPanel pnlDoubleBloodCirculation1;
    private javax.swing.JPanel pnl_Header;
    // End of variables declaration//GEN-END:variables
}
